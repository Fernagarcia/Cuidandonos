// PSEUDO CALCULO DEMORA PUNTO A PUNTO 

public Class Trayecto{
	private String direccActual;
	private String direccDestino;
	private LocalDateTime horaDePartida;
	private IAdapterDistanceMatrixAPI adapterDistanceMatrixAPI;

	public Integer calcularDistancia(){
		return adapterDistanceMatrixAPI.calcularDistancia(direccActual, direccDestino);
	}

	public LocalDateTime horaDeLlegada(){
		return horaDeLlegada;
	}
}

public Class GestorDeCalculo{

	// PSEUDO CALCULO DEMORA POR N MINUTOS DE ESPERA

	public List<LocalDateTime> calcularDemoraNMinutos(List<Trayecto> trayectos){
		LocalDateTime demora;
		List<LocalDateTime> tiemposDeDemoras;		
		
		// En este for tomamos la hora de partida de B->C y le restamos la hora de llegada de A->B para 
		// poder ver el tiempo que se demoro entre la llegada y la partida hacia el otro punto
		
		for(int i = 0; i <= trayectos.size(); i++){
			demora = trayectos.get(i+1).horaDePartida.minusHours(trayectos.get(i).horaDeLlegada());
			tiemposDeDemoras.add(demora);
			i++;
		}
		return tiemposDeDemoras;
	}


	// PSEUDO CALCULO DEMORA PUNTO A PUNTO 

	public LocalDateTime calcularDemoraPuntoAPunto(List<Trayecto> trayectos){
		LocalDateTime acumuladorDemora;
		
		// En este for tomamos la hora de partida de B->C y le restamos la hora de llegada de A->B y vamos sumando
		// por cada iteracion del for en nuestra variable acumuladora para cuando llegue al ultimo destino poder
		// visualizar cuanto fue el tiempo total que se demoro
		
		for(int i = 0; i <= trayectos.size(); i++){
			acumuladorDemora += trayectos.get(i+1).horaDePartida.minusHours(trayectos.get(i).horaDeLlegada());
			i++;
		}
		return acumuladorDemora;
	}
}




